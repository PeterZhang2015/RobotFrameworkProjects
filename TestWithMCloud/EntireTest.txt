*** Settings ***
Library           OperatingSystem
Library           REST    http://mcloud.matrium.com.au:7100/api/v1
Library           Collections

*** Variables ***
${jar_file_path}    C:\\Work\\Mandroid2\\MatriumMAndroid2-release.jar    #File location for Mandroid2 jar.
${mcloud_login_user_email}    Peter.Zhang@matrium.com.au    #user email to login mcloud.
${mcloud_token}    Bearer 6fc22b08ce00468fa56cc53a22384012e16d1ac9ab12403abeaaa5e14496239e    #mCloud REST API access token.
@{device_serial_list}    #Creat the using device serial list for tear down process.
${caller_imsi}    505025504563848    #IMSI for the caller user.
${called_imsi}    505025702398631    #IMSI for the called user.
${test_caller_apn_name}    Temp    #Testing caller APN name.
${test_caller_apn}    temp_apn    #Testing caller APN.
${test_caller_network_type}    LTE    #Testing caller network type.
${test_called_apn_name}    Optus Yes Internet    #Testing called APN name.
${test_called_apn}    yesinternet    #Testing called APN.
${test_called_network_type}    LTE    #Testing called network type.
${web_url}        https://www.google.com    #Web url for web browsing.
${sms_body}       TestforSMSThroughRobotFramework3    #SMS content body.
${get_current_apn_code}    2010    #Mandroid2 code to get current APN.
${switch_airplane_mode_code}    2006    #Mandroid2 code to switch airplane mode.
${add_and_select_apn_code}    2043    #Mandroid2 code to add and select the APN.
${get_current_network_type_code}    1021    #Mandroid2 code to get current network type.
${set_network_type_code}    2052    #Mandroid2 code to set network type.
${get_user_number_code}    1010    #Mandroid2 code to get user number.
${get_user_sn_code}    1006    #Mandroid2 code to get user sn.
${place_voice_call_code}    3010    #Mandroid2 code to place a voice call.
${receive_voice_call_code}    3011    #Mandroid2 code to answer a voice call.
${end_voice_call_code}    3012    #Mandroid2 code to end a voice call.
${perform_web_browsing_code}    3030    #Mandroid2 code to perform web browsing.
${send_sms_code}    3001    #Mandroid2 code to send a SMS.
${read_received_sms_code}    3002    #Mandroid2 code to read SMS.
${switch_screen_on_code}    1031    #Mandroid2 code to switch on screen.
${switch_screen_off_code}    1032    #Mandroid2 code to switch off screen.
${call_duration}    10    #Call duration after answering the voice call.

*** Test Cases ***
EntireTest
    Comment    Connect the caller device and called device on mcloud.
    ${caller_handset_id}=    connectToMcloudUser    ${caller_imsi}    #Connect to the caller user on mCloud.
    ${called_handset_id}=    connectToMcloudUser    ${called_imsi}    #Connect to the called user on mCloud.
    Sleep    5    #Set waiting time for connecting.
    Comment    Get the user number of the caller user and called user on mcloud.
    ${caller_user_number}=    getUserNumber    ${caller_handset_id}    #Get the caller user number.
    ${called_user_number}=    getUserNumber    ${called_handset_id}    #Get the called user number.
    ${caller_user_number}=    Evaluate    '${caller_user_number}'.replace('+61','0')    #Replace +61 with 0.
    ${called_user_number}=    Evaluate    '${called_user_number}'.replace('+61','0')    #Replace +61 with 0.
    Comment    Starting to check whether it needs to switch APN for caller user.
    ${current_caller_apn}    ${current_caller_apn_name}    checkCurrentAPN    ${caller_handset_id}    #Check current APN for caller user.
    Run Keyword If    "${current_caller_apn}"!="${test_caller_apn}" or "${current_caller_apn_name}"!="${test_caller_apn_name}"    addAndSelectAPN    ${caller_handset_id}    ${test_caller_apn_name}    ${test_caller_apn}    #Switch APN on caller device if necessary.
    Comment    Starting to check whether it needs to switch APN for called user.
    ${current_called_apn}    ${current_called_apn_name}    checkCurrentAPN    ${called_handset_id}    #Check current APN for called user.
    Run Keyword If    "${current_called_apn}"!="${test_called_apn}" or "${current_called_apn_name}"!="${test_called_apn_name}"    addAndSelectAPN    ${called_handset_id}    ${test_called_apn_name}    ${test_called_apn}    #Switch APN on called device if necessary.
    Comment    Starting to check whether it needs to switch network type for caller user.
    attachHandset    ${caller_handset_id}    #Attach caller user.
    ${callerCurrentNetworkType}=    checkCurrentNetworkType    ${caller_handset_id}    #Get current network type for caller user.
    Run Keyword If    "${callerCurrentNetworkType}"!="${test_caller_network_type}"    Run Keywords    setNetworkType    ${caller_handset_id}    ${test_network_type}
    ...    AND    log    Switched to the configured network type "${test_caller_network_type}" for ${caller_handset_id}.
    ...    ELSE    log    There is no need to swtch the network type for ${caller_handset_id}.
    ${callerCurrentNetworkType}=    checkCurrentNetworkType    ${caller_handset_id}    #Get current network type for caller user.
    Run Keyword If    "${callerCurrentNetworkType}"!="${test_caller_network_type}"    Run Keywords    Fatal Error    msg="Failed to set network type for ${caller_handset_id} "
    Comment    Starting to check whether it needs to switch network type for called user.
    attachHandset    ${called_handset_id}    #Attach called user.
    ${calledCurrentNetworkType}=    checkCurrentNetworkType    ${called_handset_id}    #Get current network type for called user.
    Run Keyword If    "${calledCurrentNetworkType}"!="${test_called_network_type}"    Run Keywords    setNetworkType    ${called_handset_id}    ${test_network_type}
    ...    AND    log    Switched to the configured network type "${test_called_network_type}" for ${called_handset_id}.
    ...    ELSE    log    There is no need to swtch the network type for ${called_handset_id}.
    ${calledCurrentNetworkType}=    checkCurrentNetworkType    ${called_handset_id}    #Get current network type for caller user.
    Run Keyword If    "${calledCurrentNetworkType}"!="${test_called_network_type}"    Run Keywords    Fatal Error    msg="Failed to set network type for ${caller_handset_id} "
    Comment    Starting to perform web browsing on caller user.
    performWebBrowsing    ${caller_handset_id}    ${web_url}    #Browsing the web site.
    Sleep    5    #Set waiting time for web browsing.
    Comment    Starting to perform a voice call.
    placeBasicVoiceCall    ${caller_handset_id}    ${called_user_number}    #Place a voice call on caller side.
    receiveBasicVoiceCall    ${called_handset_id}    ${caller_user_number}    ${call_duration}    #Receive a voice call on called side.
    endBasicVoiceCall    ${called_handset_id}
    Comment    Starting to perform a SMS.
    sendBasicSMS    ${caller_handset_id}    ${called_user_number}    ${sms_body}    #Send a basic SMS.
    Sleep    5    #Set duration for the SMS transmission.
    ${received_sms_body}=    receiveAndReadSMS    ${called_handset_id}    #Read the latest received SMS.
    Run Keyword If    "${received_sms_body}"!="${sms_body}"    Run Keywords    Fatal Error    msg="Received SMS content ${received_sms_body} is not equal to the sending SMS content ${sms_body}"
    ...    ELSE    log    SMS from ${caller_user_number} to ${called_user_number} has been received!
    tearDownUsingDevices    @{device_serial_list}    #Tear down using devices on mcloud.

Temp_Test
    ${caller_handset_id}=    connectToMcloudUser    ${caller_imsi}    #Connect to the caller user on mCloud.
    Sleep    5    #Set waiting time for connecting.
    ${current_apn}    ${current_apn_name}    checkCurrentAPN    ${caller_handset_id}    #Check current APN for caller user.
    Run Keyword If    "${current_apn}"!="${test_caller_apn}" or "${current_apn_name}"!="${test_caller_apn_name}"    addAndSelectAPN    ${caller_handset_id}    ${test_caller_apn_name}    ${test_caller_apn}
    tearDownUsingDevices    @{device_serial_list}    #Tear down using devices on mcloud.

REST_API_Test
    ${devices_url_list}=    Create List
    ${headers}=    Create Dictionary    Authorization=${mcloud_token}
    GET    /devices    headers=${headers}    # this creates a new instance
    ${body}=    object    response body
    @{devices_list}=    Set Variable    ${body[0]['devices']}
    : FOR    ${device}    IN    @{devices_list}
    \    log    ${device['phone']['imsi']}
    \    Append To List    ${devices_url_list}    ${device['phone']['imsi']}

*** Keywords ***
requestDevice
    [Arguments]    ${deviceSerial}
    ${headers}=    Create Dictionary    Authorization=${mcloud_token}    #Set authorization Token to acces mCloud through REST API.
    ${data}=    Create Dictionary    serial=${deviceSerial}    #Set device serial as the REST API POST body.
    POST    /user/devices    headers=${headers}    body=${data}    # Call REST API to use the device on mcloud.
    ${response}=    object    response body
    Append To List    ${device_serial_list}    ${deviceSerial}    # Append device serial list for further tear down.

remoteConnect
    [Arguments]    ${deviceSerial}
    ${headers}=    Create Dictionary    Authorization=${mcloud_token}    #Set authorization Token to acces mCloud through REST API.
    ${data}=    Create Dictionary    serial=${deviceSerial}
    POST    /user/devices/${deviceSerial}/remoteConnect    headers=${headers}    body=${data}    # Call REST API to get the remote debug URL of the testing device for further adb control.
    ${body}=    object    response body
    [Return]    ${body[0]}

releaseDevice
    [Arguments]    ${deviceSerial}
    ${headers}=    Create Dictionary    Authorization=${mcloud_token}    #Set authorization Token to acces mCloud through REST API.
    ${response}=    Delete    /user/devices/${deviceSerial}    headers=${headers}    # Call REST API to release the use of the testing device.

getDeviceSerialByImsi
    [Arguments]    ${userIMSI}
    ${device_serial}=    Set Variable    ${EMPTY}    # Initialize the device serial.
    ${headers}=    Create Dictionary    Authorization=${mcloud_token}    #Set authorization Token to acces mCloud through REST API.
    GET    /devices    headers=${headers}    # Call REST API to get the devices list on mcloud.
    ${body}=    object    response body    # Get the response body.
    @{devices_list}=    Set Variable    ${body[0]['devices']}    # Get device list from response body.
    Run Keyword If    "len(@{devices_list})"=="0"    Fatal Error    msg="There is not handset connected to the mcloud."    # Check whether any handset is connected on mcloud.
    Comment    Loop to check the device that can be matched with the testing user IMSI.
    : FOR    ${device}    IN    @{devices_list}
    \    Continue For Loop If    "${device['present']}"!="True"    # Only check the present handsets.
    \    Continue For Loop If    "${device['phone']['imsi']}"=="None"    # Only check the handsets with IMSI.
    \    ${device_serial}=    Set Variable If    "${device['phone']['imsi']}"=="${userIMSI}"    ${device['serial']}    # Get the device serial of the matched IMSI.
    \    Run Keyword If    "${device['phone']['imsi']}"=="${userIMSI}"    Exit For Loop    # Exit the loop when found the device serial of the matched IMSI.
    Comment    Check that whether the device has been occupied by someone else.
    ${current_device_owner_email}=    Set Variable If    "${device['owner']}"!="None"    ${device['owner']['email']}    "None"
    Run Keyword If    "${device['owner']}"=="None"    log    "Handset with IMSI ${userIMSI} has not been occupied."
    ...    ELSE IF    "${current_device_owner_email}"=="${mcloud_login_user_email}"    Run Keywords    releaseDevice    ${device_serial}
    ...    AND    log    "Handset with IMSI ${userIMSI} has been occupied by myself ${mcloud_login_user_email}."
    ...    ELSE    Fatal Error    msg="Handset with IMSI ${userIMSI} has been occupied by mcloud user ${device['owner']['email']}."
    [Return]    ${device_serial}

connectToMcloudUser
    [Arguments]    ${userIMSI}
    ${device_serial}=    getDeviceSerialByImsi    ${userIMSI}    #Try to find the device serial of the matched IMSI.
    Run Keyword If    "${device_serial}"=="${EMPTY}"    Fatal Error    msg="Cannot find the matched IMSI ${userIMSI} on mcloud"    #Abort the execution if it cannot find the matched IMSI on mcloud.
    requestDevice    ${device_serial}    #Use the device on mcloud.
    ${response}=    remoteConnect    ${device_serial}    #Get the device remote control url.
    Comment    Abort the execution if it cannot get the remote control url of the testing device.
    run Keyword If    "${response['success']}"!="True"    Fatal Error    msg="Fail to remoteConnect ${userIMSI} on mcloud"
    ...    ELSE    log    connect ${userIMSI} on mcloud successfully
    ${cmd_response}=    Run    adb connect ${response['remoteConnectUrl']}    #ADB connect to the device on mCloud.
    [Return]    ${response['remoteConnectUrl']}

switchAirplaneMode
    [Arguments]    ${handsetId}    ${airplane_mode}
    ${response}=    Run    java -jar ${jar_file_path} ${handsetId} ${switch_airplane_mode_code} airplane_mode_switch ${airplane_mode}    #Run Mandroid2 command to switch on the airplane mode.
    ${data}=    Evaluate    json.loads("""${response}""")    json    #Convert response to a python dictionary.
    checkMandroidResultIsSuccess    ${data}

attachHandset
    [Arguments]    ${handsetId}
    switchAirplaneMode    handsetId= ${handsetId}    airplane_mode=1    #Turn on the airplane mode.
    Sleep    2    #Set waiting time.
    switchAirplaneMode    handsetId= ${handsetId}    airplane_mode=0    #Turn off the airplane mode.

checkCurrentAPN
    [Arguments]    ${handsetId}
    ${response}=    Run    java -jar ${jar_file_path} ${handsetId} ${get_current_apn_code}    #Run Mandroid2 command to get on current APN.
    ${data}=    Evaluate    json.loads("""${response}""")    json    #Convert response to a python dictionary.
    checkMandroidResultIsSuccess    ${data}
    ${current_apn}=    Set Variable    ${data['APN']}    #Get current APN from the formatted python dictionary.
    ${current_apn_name}=    Set Variable    ${data['Name']}    #Get current APN name from the formatted python dictionary.
    [Return]    ${current_apn}    ${current_apn_name}    #Return the current APN and APN name.

addAndSelectAPN
    [Arguments]    ${handsetId}    ${apnName}    ${apn}
    ${apnName}=    Evaluate    '${apnName}'.replace(' ','0')
    ${response}=    Run    java -jar ${jar_file_path} ${handsetId} ${add_and_select_apn_code} edit_apn_type 2 new_apn_name "${apnName}" new_apn "${apn}" isRooted false
    ${data}=    Evaluate    json.loads("""${response}""")    json    #Convert response to a python dictionary.
    checkMandroidResultIsSuccess    ${data}

checkCurrentNetworkType
    [Arguments]    ${handsetId}
    ${response}=    Run    java -jar ${jar_file_path} ${handsetId} ${get_current_network_type_code}    #Run Mandroid2 command to get current network type.
    ${data}=    Evaluate    json.loads("""${response}""")    json    #Convert response to a python dictionary.
    checkMandroidResultIsSuccess    ${data}
    ${current_network_type}=    Set Variable    ${data['networkType']}    #Get current network type from the formatted python dictionary.
    [Return]    ${current_network_type}    #Return the current network type.

setNetworkType
    [Arguments]    ${handsetId}    ${network_mode}
    ${network_mode}    Set Variable If    "${network_mode}"=="LTE"    9    "${network_mode}"=="3G"    2
    ...    ELSE    0
    ${response}=    Run    java -jar ${jar_file_path} ${handsetId} ${set_network_type_code} network_mode ${network_mode} isRooted false
    ${data}=    Evaluate    json.loads("""${response}""")    json    #Convert response to a python dictionary.
    checkMandroidResultIsSuccess    ${data}

getUserNumber
    [Arguments]    ${handsetId}
    ${response}=    Run    java -jar ${jar_file_path} ${handsetId} ${get_user_number_code}    #Run Mandroid2 command to get user number.
    ${data}=    Evaluate    json.loads("""${response}""")    json    #Convert response to a python dictionary.
    checkMandroidResultIsSuccess    ${data}
    ${user_number}=    Set Variable    ${data['msisdn']}    #Get user number from the formatted python dictionary.
    [Return]    ${user_number}    #Return the user number.

getUserSN
    [Arguments]    ${handsetId}
    ${response}=    Run    java -jar ${jar_file_path} ${handsetId} ${get_user_sn_code}    #Run Mandroid2 command to get user sn.
    ${data}=    Evaluate    json.loads("""${response}""")    json    #Convert response to a python dictionary.
    checkMandroidResultIsSuccess    ${data}
    ${user_sn}=    Set Variable    ${data['AndroidId']}    #Get user sn from the formatted python dictionary.
    [Return]    ${user_sn}    #Return the user sn.

placeBasicVoiceCall
    [Arguments]    ${handsetId}    ${calledUserNumber}
    ${response}=    Run    java -jar ${jar_file_path} ${handsetId} ${place_voice_call_code} call_phonenum ${calledUserNumber}    #Run Mandroid2 command to place a voice call.
    ${data}=    Evaluate    json.loads("""${response}""")    json    #Convert response to a python dictionary.
    checkMandroidResultIsSuccess    ${data}

receiveBasicVoiceCall
    [Arguments]    ${handsetId}    ${callerUserNumber}    ${callDuration}
    ${response}=    Run    java -jar ${jar_file_path} ${handsetId} ${receive_voice_call_code} incoming_number ${callerUserNumber} call_duration ${callDuration}    #Run Mandroid2 command to answer a voice call.
    ${data}=    Evaluate    json.loads("""${response}""")    json    #Convert response to a python dictionary.

endBasicVoiceCall
    [Arguments]    ${handsetId}
    ${response}=    Run    java -jar ${jar_file_path} ${handsetId} ${end_voice_call_code}    #Run Mandroid2 command to end a voice call.
    ${data}=    Evaluate    json.loads("""${response}""")    json    #Convert response to a python dictionary.
    checkMandroidResultIsSuccess    ${data}

performWebBrowsing
    [Arguments]    ${handsetId}    ${webUrl}
    ${response}=    Run    java -jar ${jar_file_path} ${handsetId} ${perform_web_browsing_code} web_url ${webUrl}    #Run Mandroid2 command to perform a web browsing.
    ${data}=    Evaluate    json.loads("""${response}""")    json    #Convert response to a python dictionary.
    checkMandroidResultIsSuccess    ${data}

sendBasicSMS
    [Arguments]    ${handsetId}    ${receiveUserNumber}    ${smsBody}
    ${response}=    Run    java -jar ${jar_file_path} ${handsetId} ${send_sms_code} sms_address ${receiveUserNumber} sms_body ${smsBody}    #Run Mandroid2 command to send a SMS.
    ${data}=    Evaluate    json.loads("""${response}""")    json    #Convert response to a python dictionary.
    checkMandroidResultIsSuccess    ${data}

receiveAndReadSMS
    [Arguments]    ${handsetId}
    ${response}=    Run    java -jar ${jar_file_path} ${handsetId} ${read_received_sms_code}    #Run Mandroid2 command to read the latest received SMS.
    ${data}=    Evaluate    json.loads("""${response}""")    json    #Convert response to a python dictionary.
    ${sms_body}=    Set Variable    ${data['smsBody']}    #Get SMS body from the formatted python dictionary.
    [Return]    ${sms_body}    #Return the SMS body.

unlockScreen
    [Arguments]    ${handsetId}
    ${response}=    Run    java -jar ${jar_file_path} ${handsetId} ${switch_screen_on_code}    #Run Mandroid2 command to switch on device screen.
    ${data}=    Evaluate    json.loads("""${response}""")    json    #Convert response to a python dictionary.
    checkMandroidResultIsSuccess    ${data}

lockScreen
    [Arguments]    ${handsetId}
    ${response}=    Run    java -jar ${jar_file_path} ${handsetId} ${switch_screen_off_code}    #Run Mandroid2 command to switch off device screen.
    ${data}=    Evaluate    json.loads("""${response}""")    json    #Convert response to a python dictionary.
    checkMandroidResultIsSuccess    ${data}

checkMandroidResultIsSuccess
    [Arguments]    ${response}
    ${is_success}=    Set Variable    ${response['isSuccess']}    #Get Mandroid execution result from the formatted python dictionary.
    ${description}=    Set Variable    ${response['description']}    #Get error description from the formatted python dictionary.
    Comment    Tear down the using device and abort the execution if any Mandroid command was failed.
    Run Keyword If    ${is_success}==False    Run Keywords    tearDownUsingDevices    @{device_serial_list}
    ...    AND    Fatal Error    msg=${description}    #Disconnect users and abort the execution.

tearDownUsingDevices
    [Arguments]    @{deviceSerialList}
    : FOR    ${device_serial}    IN    @{deviceSerialList}
    \    log    device_serial is ${device_serial}.
    \    releaseDevice    ${device_serial}
    ${response}=    Run    adb disconnect    #Disconnect all users.
